// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import { client, getTodos, createTodo, completeTodo } from "../services.gen";
import type {
  CreateTodoData,
  CreateTodoError,
  CreateTodoResponse,
  CompleteTodoData,
  CompleteTodoError,
  CompleteTodoResponse,
} from "../types.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getTodosQueryKey = (options?: Options) => [
  createQueryKey("getTodos", options),
];

export const getTodosOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTodos({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTodosQueryKey(options),
  });
};

export const createTodoQueryKey = (options: Options<CreateTodoData>) => [
  createQueryKey("createTodo", options),
];

export const createTodoOptions = (options: Options<CreateTodoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createTodo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createTodoQueryKey(options),
  });
};

export const createTodoMutation = (
  options?: Partial<Options<CreateTodoData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateTodoResponse,
    CreateTodoError,
    Options<CreateTodoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createTodo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const completeTodoMutation = (
  options?: Partial<Options<CompleteTodoData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CompleteTodoResponse,
    CompleteTodoError,
    Options<CompleteTodoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await completeTodo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
